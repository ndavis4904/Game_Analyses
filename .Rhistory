renv::activate()
install.packages("here")
#Function to roll a single die/Spin a spinner
roll <- function(){
spinner <- c(1:6)
sample(spinner, 1)
}
#Function to represent the player's turn
turn <- function(x) {
x + roll()
}
#Test the Function
rolls <- NULL
for (i in 1:20) {
rolls[i] <- roll()
}
table(rolls)
#Test the Function
rolls <- NULL
for (i in 1:100) {
rolls[i] <- roll()
}
table(rolls)
#Test the Function
rolls <- NULL
for (i in 1:1000) {
rolls[i] <- roll()
}
table(rolls)
df <- data.frame("Land" = c(1,4,9,16,21,28,36,47,49,51,56,62,64,71,80,87,93,95,98),
"GoTo" = c(38,14,31,6,42,84,44,26,11,67,53,19,60,91,100,24,73,75,78))
df <- data.frame("Land" = c(1,4,9,16,21,28,36,47,49,51,56,62,64,71,80,87,93,95,98),
"GoTo" = c(38,14,31,6,42,84,44,26,11,67,53,19,60,91,100,24,73,75,78))
#Add column to identify Chute square or Ladder square
df$Cat <- rep(NA, 19)
for (i in 1:length(df$Land)) {
if(df$Land[i]-df$GoTo[i] < 0) {
df$Cat[i] <- "Ladder"
} else {
df$Cat[i] <- "Chute"
}
}
#Functions
roll <- function(){      #Roll the dice
spinner <- c(1:6)
sample(spinner, 1)
}
turn <- function(x) {   #Player's turn
x + roll()
}
#dataframes
df <- data.frame("Land" = c(1,4,9,16,21,28,36,47,49,51,56,62,64,71,80,87,93,95,98),
"GoTo" = c(38,14,31,6,42,84,44,26,11,67,53,19,60,91,100,24,73,75,78))
df$Cat <- rep(NA, 19)
for (i in 1:length(df$Land)) {
if(df$Land[i]-df$GoTo[i] < 0) {
df$Cat[i] <- "Ladder"
} else {
df$Cat[i] <- "Chute"
}
}
install.packages("mosaic")
install.packages("ggplot2")
for (i in 1:N) {
player <- 0
turn_temp <- 0
while (player < 101) {
this_roll <- roll()
if(player + this_roll == 100 | player == 100) {
#player <- player + this_roll
break
} else if(player + this_roll >100){
next
} else {
player <- player + this_roll
}
for (j in 1:length(df$Land)) {
if(player == df$Land[j]) {
player <- df$GoTo[j]
} else {
next
}
}
turn_temp <- turn_temp + 1
}
#player_test[i] <- ifelse( player == 100, player, player + this_roll )
#turns[i] <- turn_temp
player_test <- append(player_test, ifelse(player == 100, player, player + this_roll))
turns[i] <- append(turns[i], turn_temp)
}
player_test <- NULL
N <- 100
turns <- NULL
for (i in 1:N) {
player <- 0
turn_temp <- 0
while (player < 101) {
this_roll <- roll()
if(player + this_roll == 100 | player == 100) {
#player <- player + this_roll
break
} else if(player + this_roll >100){
next
} else {
player <- player + this_roll
}
for (j in 1:length(df$Land)) {
if(player == df$Land[j]) {
player <- df$GoTo[j]
} else {
next
}
}
turn_temp <- turn_temp + 1
}
#player_test[i] <- ifelse( player == 100, player, player + this_roll )
#turns[i] <- turn_temp
player_test <- append(player_test, ifelse(player == 100, player, player + this_roll))
turns[i] <- append(turns[i], turn_temp)
}
turn_temp
turns
?append
test <- 4
test <- append(test, 5)
test
player_test <- NULL
N <- 100
turns <- NULL
for (i in 1:N) {
player <- 0
turn_temp <- 0
while (player < 101) {
this_roll <- roll()
if(player + this_roll == 100 | player == 100) {
#player <- player + this_roll
break
} else if(player + this_roll >100){
next
} else {
player <- player + this_roll
}
for (j in 1:length(df$Land)) {
if(player == df$Land[j]) {
player <- df$GoTo[j]
} else {
next
}
}
turn_temp <- turn_temp + 1
}
#player_test[i] <- ifelse( player == 100, player, player + this_roll )
#turns[i] <- turn_temp
player_test <- append(player_test, ifelse(player == 100, player, player + this_roll))
turns <- append(turns, turn_temp)
}
turns
player <- 4
if(player == df$Land[2]) {
player <- df$GoTo[2]
}
player
test <- 0
while (test < 11) {
test <- test + 1
}
test
table(player_test)
?print
sum(player_test)
100*100
N
player_test*N
ifelse(sum(player_test) != 100*N, "Error in Turns", NULL)
player_test
N
sum(player_test)
sum(player_test) != 100*N
args(ifelse)
NULL
ifelse(sum(player_test) != 100*N, "Error in Turns")
?hist
for (i in 1:N) {
player <- 0
turn_temp <- 0
while (player < 101) {
this_roll <- roll()
if(player + this_roll == 100 | player == 100) {
#player <- player + this_roll
break
} else if(player + this_roll >100){
next
} else {
player <- player + this_roll
}
for (j in 1:length(df$Land)) {
if(player == df$Land[j]) {
player <- df$GoTo[j]
} else {
next
}
}
turn_temp <- turn_temp + 1
}
#player_test[i] <- ifelse( player == 100, player, player + this_roll )
#turns[i] <- turn_temp
player_test <- append(player_test, ifelse(player == 100, player, player + this_roll))
turns <- append(turns, turn_temp)
}
hist(turns)
hist(turns, color = "skyblue", xlab = "Numer of Turns in the Game")
hist(turns, color = "skyblue", xlab = "Numer of Turns in the Game")
hist(turns, col = "skyblue", xlab = "Numer of Turns in the Game")
install.packages("stargate")
install.packages("stargazer")
library(stargazer)
#Libraries
library(mosaic)
library(stargazer)
?stargazer
library(stargazer)
s_type <- "text"
stargazer(turns, type = s_type)
stargazer(turns)
stargazer(turns, type = "text")
install.packages("pander")
library(pander)
favstats(turns)
favstats(turns)[1:7]
?qt
t.s <- qt(p = 0.05/2, df = N-1)
t.s
mar.err <- t.s * stand.error
stand.dev <- sd(turns)
stand.error <- stand.dev / sqrt(N)
t.s <- qt(p = 0.05/2, df = N-1)
mar.err <- t.s * stand.error
mar.err
player_test <- NULL
N <- 10000
turns <- NULL
for (i in 1:N) {
player <- 0
turn_temp <- 0
while (player < 101) {
this_roll <- roll()
if(player + this_roll == 100 | player == 100) {
#player <- player + this_roll
break
} else if(player + this_roll >100){
next
} else {
player <- player + this_roll
}
for (j in 1:length(df$Land)) {
if(player == df$Land[j]) {
player <- df$GoTo[j]
} else {
next
}
}
turn_temp <- turn_temp + 1
}
#player_test[i] <- ifelse( player == 100, player, player + this_roll )
#turns[i] <- turn_temp
player_test <- append(player_test, ifelse(player == 100, player, player + this_roll))
turns <- append(turns, turn_temp)
}
favstats(turns)
ifelse(sum(player_test) != 100*N, "Error in Turns", "Simulation Worked")
favstats(turns)
t.s <- qt(p = 0.05/2, df = N-1)
t.s
stand.dev <- sd(turns)
stand.error <- stand.dev / sqrt(N)
t.s <- qt(p = 0.05/2, df = N-1)
marg.err <- t.s * stand.error
marg.err
