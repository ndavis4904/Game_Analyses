sample(nrow(hand.disc), 1)
hand <- rbind(hand.stay, hand.disc[-sample(nrow(hand.disc), 1)])
nrow(hand)
hand
hand <- rbind(hand.stay, hand.disc[-4])
nrow(hand)
hand <- rbind(hand.stay, hand.disc[-4,])
nrow(hand)
hand <- rbind(hand.stay, hand.disc[-sample(nrow(hand.disc), 1),])
nrow(hand)
N <- 10
turns <- NULL
for(i in 1:N) {
#Draw your Hand
hand <- phase.dat[sample(c(1:nrow(phase.dat)), 10),]
win <- NULL
while (win != "Lay Down") {
hand <- draw.fun(hand)
hand <- hand[order(as.numeric(hand$Number)),]
color.dim <- data.frame(table(hand$Color))
color.dim <- color.dim[order(color.dim$Freq, decreasing = TRUE),]
if(color.dim$Freq[1] + sum(grepl("Wild", hand$Number)) >= 7) {
win <- "Lay Down"
} else {
win <- "Didn't Lay Down"
}
hand.disc <- subset(hand, Color != color.dim$Var1[1] & Number != "Wild")
hand.stay <- subset(hand, Color == color.dim$Var1[1] | Number == "Wild")
if(win == "Didn't Lay Down") {
hand <- rbind(hand.stay, hand.disc[-sample(nrow(hand.disc), 1),])
}
turns <- turns + 1
}
}
win
win != "Lay Down"
win == "Lay Down"
win <- "test"
win == "Lay Down"
win != "Lay Down"
N <- 10
turns <- NULL
for(i in 1:N) {
#Draw your Hand
hand <- phase.dat[sample(c(1:nrow(phase.dat)), 10),]
win <- "Placeholder"
while (win != "Lay Down") {
hand <- draw.fun(hand)
hand <- hand[order(as.numeric(hand$Number)),]
color.dim <- data.frame(table(hand$Color))
color.dim <- color.dim[order(color.dim$Freq, decreasing = TRUE),]
if(color.dim$Freq[1] + sum(grepl("Wild", hand$Number)) >= 7) {
win <- "Lay Down"
} else {
win <- "Didn't Lay Down"
}
hand.disc <- subset(hand, Color != color.dim$Var1[1] & Number != "Wild")
hand.stay <- subset(hand, Color == color.dim$Var1[1] | Number == "Wild")
if(win == "Didn't Lay Down") {
hand <- rbind(hand.stay, hand.disc[-sample(nrow(hand.disc), 1),])
}
turns <- turns + 1
}
}
turns
turns <- turns+1
turns
turns <- 0
turns <- turns+1
turns
N <- 10
turns <- 0
for(i in 1:N) {
#Draw your Hand
hand <- phase.dat[sample(c(1:nrow(phase.dat)), 10),]
win <- "Placeholder"
while (win != "Lay Down") {
hand <- draw.fun(hand)
hand <- hand[order(as.numeric(hand$Number)),]
color.dim <- data.frame(table(hand$Color))
color.dim <- color.dim[order(color.dim$Freq, decreasing = TRUE),]
if(color.dim$Freq[1] + sum(grepl("Wild", hand$Number)) >= 7) {
win <- "Lay Down"
} else {
win <- "Didn't Lay Down"
}
hand.disc <- subset(hand, Color != color.dim$Var1[1] & Number != "Wild")
hand.stay <- subset(hand, Color == color.dim$Var1[1] | Number == "Wild")
if(win == "Didn't Lay Down") {
hand <- rbind(hand.stay, hand.disc[-sample(nrow(hand.disc), 1),])
}
turns <- turns + 1
}
}
turns
N <- 10
turns <- NULL
for(i in 1:N) {
#Draw your Hand
hand <- phase.dat[sample(c(1:nrow(phase.dat)), 10),]
this.round <- 0
win <- "Placeholder"
while (win != "Lay Down") {
hand <- draw.fun(hand)
hand <- hand[order(as.numeric(hand$Number)),]
color.dim <- data.frame(table(hand$Color))
color.dim <- color.dim[order(color.dim$Freq, decreasing = TRUE),]
if(color.dim$Freq[1] + sum(grepl("Wild", hand$Number)) >= 7) {
win <- "Lay Down"
} else {
win <- "Didn't Lay Down"
}
hand.disc <- subset(hand, Color != color.dim$Var1[1] & Number != "Wild")
hand.stay <- subset(hand, Color == color.dim$Var1[1] | Number == "Wild")
if(win == "Didn't Lay Down") {
hand <- rbind(hand.stay, hand.disc[-sample(nrow(hand.disc), 1),])
}
this.round <- this.round + 1
}
turns <- append(turns, this.round)
}
turns
length(turns)
mean(turns)
warnings()
N <- 100
turns <- NULL
for(i in 1:N) {
#Draw your Hand
hand <- phase.dat[sample(c(1:nrow(phase.dat)), 10),]
this.round <- 0
win <- "Placeholder"
while (win != "Lay Down") {
hand <- draw.fun(hand)
hand <- hand[order(as.numeric(hand$Number)),]
color.dim <- data.frame(table(hand$Color))
color.dim <- color.dim[order(color.dim$Freq, decreasing = TRUE),]
if(color.dim$Freq[1] + sum(grepl("Wild", hand$Number)) >= 7) {
win <- "Lay Down"
} else {
win <- "Didn't Lay Down"
}
hand.disc <- subset(hand, Color != color.dim$Var1[1] & Number != "Wild")
hand.stay <- subset(hand, Color == color.dim$Var1[1] | Number == "Wild")
if(win == "Didn't Lay Down") {
hand <- rbind(hand.stay, hand.disc[-sample(nrow(hand.disc), 1),])
}
this.round <- this.round + 1
}
turns <- append(turns, this.round)
}
mean(turns)
heand(phase.dat)
head(phase.dat)
table(phase.dat$Number)
phase.dat.simple <- subset(phase.dat, Number != "Wild" & Number != "Skip")
table(phase.dat.simple$Number)
favstats(turns) %>%
pander()
library(pander)
favstats(turns) %>%
pander()
histogram(turns, color = "skyblue")
?abline
histogram(turns, color = "skyblue")
abline(v = mean(turns))
histogram(turns, color = "skyblue")
abline(v = mean(turns), col = "firebrick", lwd = 2)
hist(turns, color = "skyblue")
abline(v = mean(turns), col = "firebrick", lwd = 2)
?histogram
?hist
hist(turns, col = "skyblue")
histogram(turns, col = "skyblue")
?hist
hist(turns, col = "skyblue")
table(turns)
abline(v = mean(turns), col = "firebrick", lwd = 2)
?t.test
turns
N
turns <- NULL
for(i in 1:N) {
#Draw your Hand
hand <- phase.dat[sample(c(1:nrow(phase.dat)), 10),]
this.round <- 0
win <- "Placeholder"
while (win != "Lay Down") {
hand <- draw.fun(hand)
hand <- hand[order(as.numeric(hand$Number)),]
color.dim <- data.frame(table(hand$Color))
color.dim <- color.dim[order(color.dim$Freq, decreasing = TRUE),]
if(color.dim$Freq[1] + sum(grepl("Wild", hand$Number)) >= 7) {
win <- "Lay Down"
} else {
win <- "Didn't Lay Down"
}
hand.disc <- subset(hand, Color != color.dim$Var1[1] & Number != "Wild")
hand.stay <- subset(hand, Color == color.dim$Var1[1] | Number == "Wild")
if(win == "Didn't Lay Down") {
hand <- rbind(hand.stay, hand.disc[-sample(nrow(hand.disc), 1),])
}
this.round <- this.round + 1
}
turns <- append(turns, this.round)
}
turns.nwld <- NULL
for(i in 1:N) {
#Draw your Hand
hand <- phase.dat[sample(c(1:nrow(phase.dat.simple)), 10),]
this.round <- 0
win <- "Placeholder"
while (win != "Lay Down") {
hand <- draw.fun.nwld(hand)
hand <- hand[order(as.numeric(hand$Number)),]
color.dim <- data.frame(table(hand$Color))
color.dim <- color.dim[order(color.dim$Freq, decreasing = TRUE),]
if(color.dim$Freq[1] + sum(grepl("Wild", hand$Number)) >= 7) {
win <- "Lay Down"
} else {
win <- "Didn't Lay Down"
}
hand.disc <- subset(hand, Color != color.dim$Var1[1] & Number != "Wild")
hand.stay <- subset(hand, Color == color.dim$Var1[1] | Number == "Wild")
if(win == "Didn't Lay Down") {
hand <- rbind(hand.stay, hand.disc[-sample(nrow(hand.disc), 1),])
}
this.round <- this.round + 1
}
turns.nwld <- append(turns.nwld, this.round)
}
draw.fun.nwld <- function(hand) {
new.card <- phase.dat.simple[sample(c(1:nrow(phase.dat.simple)), 1),]
hand <- rbind(hand, new.card)
}
turns.nwld <- NULL
for(i in 1:N) {
#Draw your Hand
hand <- phase.dat[sample(c(1:nrow(phase.dat.simple)), 10),]
this.round <- 0
win <- "Placeholder"
while (win != "Lay Down") {
hand <- draw.fun.nwld(hand)
hand <- hand[order(as.numeric(hand$Number)),]
color.dim <- data.frame(table(hand$Color))
color.dim <- color.dim[order(color.dim$Freq, decreasing = TRUE),]
if(color.dim$Freq[1] + sum(grepl("Wild", hand$Number)) >= 7) {
win <- "Lay Down"
} else {
win <- "Didn't Lay Down"
}
hand.disc <- subset(hand, Color != color.dim$Var1[1] & Number != "Wild")
hand.stay <- subset(hand, Color == color.dim$Var1[1] | Number == "Wild")
if(win == "Didn't Lay Down") {
hand <- rbind(hand.stay, hand.disc[-sample(nrow(hand.disc), 1),])
}
this.round <- this.round + 1
}
turns.nwld <- append(turns.nwld, this.round)
}
hist(turns.nwld, col = "skyblue")
abline(v = mean(turns.nwld), col = "firebrick", lwd = 2)
turns.t <- t.test(turns, turns.nwld, alternative = "two.sided")
summary(turns.t)
?t.test
?summary
turns.t
turns.t %>%
pander()
library(mosaic)
library(combinat)
phase.dat <- read.csv("./Phase10/Data/Phase10Dat.csv")
phases <- c("2 Sets of 3", "1 Set of 3 & 1 Run of 4", "1 Set of 4 & 1 Run of 4",
"1 Run of 7", "1 Run of 8", "1 Run of 9", "2 Sets of 4", "7 Cards of 1 Color",
"1 Set of 5 & 1 Set of 2", "1 Set of 5 & 1 Set of 3")
draw.fun <- function(hand) {
new.card <- phase.dat[sample(c(1:nrow(phase.dat)), 1),]
hand <- rbind(hand, new.card)
}
#Descriptive Stats of the Deck
table(phase.dat$Number)
table(phase.dat$Color)
#Drawing and sorting a hand
hand <- phase.dat[sample(c(1:nrow(phase.dat)), 10),]
hand <- draw.fun(hand)
hand <- hand[order(as.numeric(hand$Number)),]
hand
hand_simple <- hand[-grep("Wild", hand$Number),]
hand_simple <- hand_simple[-grep("Skip", hand_simple$Number),]
hand
hand_simple
##Counting each of the numbers
hand.dim <- data.frame(table(hand$Number))
hand.dim <- hand.dim[order(hand.dim$Freq, decreasing = TRUE),]
hand.dim_simple <- data.frame(table(hand_simple$Number))
hand.dim_simple <- hand.dim_simple[order(hand.dim_simple$Freq),]
hand.dim
hand_simple
hand
diff(1,2)
?abs
difference <- function(x, y) {
abs(x-y)
}
difference(1,4)
hand$Number[1]
hand$Number[[1]]
diffs <- NULL
for(i in 1:nrow(hand)-1) {
diffs[i] <- difference(hand$Number[i], hand$Number[i+1])
}
hand
diffs <- NULL
for(i in 1:nrow(hand)-1) {
diffs[i] <- difference(as.numeric(hand$Number[i]), as.numeric(hand$Number[i+1]))
}
diffs
length(diffs)
hand
diffs <- NULL
for(i in 1:nrow(hand)) {
diffs[i] <- difference(as.numeric(hand$Number[i]), as.numeric(hand$Number[i+1]))
}
diffs
N <- 100
turns <- NULL
for(i in 1:N) {
#Draw your Hand
hand <- phase.dat[sample(c(1:nrow(phase.dat)), 10),]
this.round <- 0
win <- "Placeholder"
while (win != "Lay Down") {
hand <- draw.fun(hand)
hand <- hand[order(as.numeric(hand$Number)),]
color.dim <- data.frame(table(hand$Color))
color.dim <- color.dim[order(color.dim$Freq, decreasing = TRUE),]
if(color.dim$Freq[1] + sum(grepl("Wild", hand$Number)) >= 7) {
win <- "Lay Down"
} else {
win <- "Didn't Lay Down"
}
hand.disc <- subset(hand, Color != color.dim$Var1[1] & Number != "Wild")
hand.stay <- subset(hand, Color == color.dim$Var1[1] | Number == "Wild")
if(win == "Didn't Lay Down") {
hand <- rbind(hand.stay, hand.disc[-sample(nrow(hand.disc), 1),])
}
this.round <- this.round + 1
}
turns <- append(turns, this.round)
}
turns.nwld <- NULL
for(i in 1:N) {
#Draw your Hand
hand <- phase.dat[sample(c(1:nrow(phase.dat.simple)), 10),]
this.round <- 0
win <- "Placeholder"
while (win != "Lay Down") {
hand <- draw.fun.nwld(hand)
hand <- hand[order(as.numeric(hand$Number)),]
color.dim <- data.frame(table(hand$Color))
color.dim <- color.dim[order(color.dim$Freq, decreasing = TRUE),]
if(color.dim$Freq[1] + sum(grepl("Wild", hand$Number)) >= 7) {
win <- "Lay Down"
} else {
win <- "Didn't Lay Down"
}
hand.disc <- subset(hand, Color != color.dim$Var1[1] & Number != "Wild")
hand.stay <- subset(hand, Color == color.dim$Var1[1] | Number == "Wild")
if(win == "Didn't Lay Down") {
hand <- rbind(hand.stay, hand.disc[-sample(nrow(hand.disc), 1),])
}
this.round <- this.round + 1
}
turns.nwld <- append(turns.nwld, this.round)
}
hand$diffs <- diffs
diffs <- NULL
for(i in 1:nrow(hand)) {
diffs[i] <- difference(as.numeric(hand$Number[i]), as.numeric(hand$Number[i+1]))
}
hand$diffs <- diffs
hand
hand_simple <- hand[-grep("Wild", hand$Number),]
hand_simple <- hand_simple[-grep("Skip", hand_simple$Number),]
hand_simple
grep("Wild", hand$Number)
hand_simple <- hand[-grep("Wild", hand$Number),]
hand_simple
grepl("Wild", hand$Number)
sum(grepl("Wild", hand$Number))
if(sum(grepl("Wild", hand$Number)) > 0){
hand_simple <- hand[-grep("Wild", hand$Number),]
} else {
hand_simple <- hand
}
if(sum(grepl("Skip", hand$Number)) > 0) {
hand_simple <- hand_simple[-grep("Skip", hand_simple$Number),]
} else {
hand_simple <- hand
}
hand_simple
sum(grepl("Skip", hand$Number)) > 0 & sum(grepl("Wild", hand$Number)) > 0
sum(grepl("Skip", hand$Number)) > 0 | sum(grepl("Wild", hand$Number)) > 0
grepl("NA", hand$Color)
sum(grepl("NA", hand$Color))
sum(grepl("<NA>", hand$Color))
View(phase.dat)
sum(grepl(NA, hand$Color))
?is.na
is.na(hand$Color)
sum(is.na(hand$Color))
test <- hand[is.na(hand$Color) == FALSE]
test <- hand[is.na(hand$Color) == FALSE,]
test
nrow(hand)
nrow(test)
hand
hand_simple
if(sum(is.na(hand$Color)) > 0){
hand_simple <- hand[is.na(hand$Color) == FALSE,]
} else {
hand_simple <- hand
}
hand_simple
nrow(hand_simple)
nrow(hand)
hand <- draw.fun(hand)
hand
nrow(hand)
#Drawing and sorting a hand
hand <- phase.dat[sample(c(1:nrow(phase.dat)), 10),]
hand
hand <- draw.fun(hand)
hand <- hand[order(as.numeric(hand$Number)),]
hand
if(sum(is.na(hand$Color)) > 0){
hand_simple <- hand[is.na(hand$Color) == FALSE,]
} else {
hand_simple <- hand
}
hand_simple
nrow(hand)
nrow(hand_simple)
diffs <- NULL
for(i in 1:nrow(hand)) {
diffs[i] <- difference(as.numeric(hand$Number[i]), as.numeric(hand$Number[i+1]))
}
hand$diffs <- diffs
hand
head(phase.dat)
max(phase.dat$Number)
table(phase.dat$Number)
dif.dat <- data.frame(matrix(ncol = 11, nrow = 0))
View(dif.dat)
colnames(dif.dat) <- c("Diff 1", "Diff 2", "Diff 3", "Diff 4", "Diff 5", "Diff 6",
"Diff 7", "Diff 8", "Diff 9", "Diff 10", "Diff 11",)
View(dif.dat)
colnames(dif.dat) <- c("Diff 1", "Diff 2", "Diff 3", "Diff 4", "Diff 5", "Diff 6",
"Diff 7", "Diff 8", "Diff 9", "Diff 10", "Diff 11")
for(i in 1:length(diffs) - 5) {
for(j in 1:length(combos)) {
dif.dat[j,i] <- combos[j]
}
}
combos <- c("1-7", "2-8", "3-9", "4-10", "5-11")
for(i in 1:length(diffs) - 5) {
for(j in 1:length(combos)) {
dif.dat[j,i] <- combos[j]
}
}
View(dif.dat)
dif.dat <- data.frame(matrix(ncol = 12, nrow = 0))
colnames(dif.dat) <- c("Card Combos", "Diff 1", "Diff 2", "Diff 3", "Diff 4", "Diff 5",
"Diff 6", "Diff 7", "Diff 8", "Diff 9", "Diff 10", "Diff 11")
combos <- c("1-7", "2-8", "3-9", "4-10", "5-11")
View(dif.dat)
dif.dat[1,1] <- combos[1]
dif.dat <- data.frame(matrix(ncol = 12, nrow = 0))
colnames(dif.dat) <- c("Card Combos", "Diff 1", "Diff 2", "Diff 3", "Diff 4", "Diff 5",
"Diff 6", "Diff 7", "Diff 8", "Diff 9", "Diff 10", "Diff 11")
for(i in 1:length(diffs) - 5) {
for(j in 1:length(combos)) {
dif.dat[i,j] <- combos[j]
}
}
dif.dat <- data.frame(matrix(ncol = 12, nrow = 0))
colnames(dif.dat) <- c("Card Combos", "Diff 1", "Diff 2", "Diff 3", "Diff 4", "Diff 5",
"Diff 6", "Diff 7", "Diff 8", "Diff 9", "Diff 10", "Diff 11")
for(i in 1:length(diffs) - 5) {
for(j in 1:length(combos)) {
dif.dat[j,1] <- combos[j]
}
}
table(diffs)
table(diffs)[[1]]
table(diffs)[[2]]
table(diffs)[[3]]
dif.dat
diffs
test <- NULL
for(i in 1:(nrow(hand_simple) - 6)) {
test[i] <- diffs[i:i+6]
}
test
diffs[1:7]
length(diffs)
test <- NULL
for(i in 1:(nrow(hand_simple) - 6)) {
test[i] <- diffs[i:i+5]
}
test
diffs
